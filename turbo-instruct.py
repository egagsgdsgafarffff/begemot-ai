import discord
from discord.ext import commands
import openai
import os
from dotenv import load_dotenv
import sys

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—É—Ç–∏
load_dotenv('.env')  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –æ–± –æ—à–∏–±–∫–∞—Ö
def get_env_var(name, default=None):
    value = os.getenv(name, default)
    if not value:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env —Ñ–∞–π–ª–µ")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ —á—Ç–æ –∏ —Å–∫—Ä–∏–ø—Ç")
        print(f"–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ–≥–æ —Å—Ç—Ä–æ–∫—É: {name}=–≤–∞—à–µ_–∑–Ω–∞—á–µ–Ω–∏–µ")
        sys.exit(1)
    return value

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
DISCORD_TOKEN = get_env_var('DISCORD_BOT_TOKEN')
OPENAI_API_KEY = get_env_var('OPENAI_API_KEY')
SYSTEM_PROMPT = os.getenv('SYSTEM_PROMPT', '–¢—ã - –ø–∏—à–µ—à—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∞–∑–≤—Ä–∞—Ç–Ω—ã–µ —Ñ–∞–Ω—Ñ–∏–∫–∏ 18+ –≤ –ª—é–±—ã—Ö –∂–∞–Ω—Ä–∞—Ö.')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
openai.api_key = OPENAI_API_KEY
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix='!', intents=intents)

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å–ª–æ–≤–∞—Ä—è response_parts) ...
response_parts = {}

class ContinueButton(discord.ui.Button):
    def __init__(self, message_id: int):
        super().__init__(
            label="Continue",
            style=discord.ButtonStyle.primary,
            custom_id=f"continue_{message_id}"
        )
        self.message_id = message_id

    async def callback(self, interaction: discord.Interaction):
        # –û—Ç–ª–æ–∂–∏–º –æ—Ç–≤–µ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await interaction.response.defer()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è —Ç–µ–∫—Å—Ç–∞
        if self.message_id not in response_parts:
            await interaction.followup.send("‚ùå This continuation is no longer available", ephemeral=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
        remaining = response_parts[self.message_id]
        next_chunk = remaining[:2000]
        new_remaining = remaining[2000:]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é —á–∞—Å—Ç—å
        await interaction.followup.send(next_chunk)
        
        if new_remaining:
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
            response_parts[self.message_id] = new_remaining
        else:
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏ –¥–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π
            del response_parts[self.message_id]
            view = discord.ui.View()
            view.add_item(discord.ui.Button(
                label="Continue",
                style=discord.ButtonStyle.secondary,
                disabled=True
            ))
            await interaction.message.edit(view=view)

class ContinueView(discord.ui.View):
    def __init__(self, message_id: int):
        super().__init__(timeout=3600)  # –¢–∞–π–º–∞—É—Ç 1 —á–∞—Å
        self.add_item(ContinueButton(message_id))

@bot.event
async def on_ready():
    print(f'Bot {bot.user} is ready!')
    await bot.change_presence(activity=discord.Game(name="–Ω–∏–≥–∞"))

@bot.command()
async def setprompt(ctx, *, new_prompt: str):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
    global SYSTEM_PROMPT
    SYSTEM_PROMPT = new_prompt
    await bot.change_presence(activity=discord.Game(name="–Ω–∏–≥–∞"))
    await ctx.send(f"‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω:\n```{SYSTEM_PROMPT[:1900]}```")

@bot.command()
async def showprompt(ctx):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
    await ctx.send(f"–¢–µ–∫—É—â–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:\n```{SYSTEM_PROMPT[:1900]}```")

@bot.command()
async def ask(ctx, *, user_prompt: str):
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
        full_prompt = f"{SYSTEM_PROMPT}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_prompt}\n–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI
        response = openai.Completion.create(
            model="gpt-3.5-turbo-instruct",
            prompt=full_prompt,
            max_tokens=3500,
            temperature=0.7
        )
        
        answer = response.choices[0].text.strip()
        
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É
        if len(answer) <= 2000:
            await ctx.reply(answer)
            return
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏
        first_chunk = answer[:2000]
        remaining = answer[2000:]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–æ–π Continue
        view = ContinueView(ctx.message.id)
        msg = await ctx.reply(first_chunk, view=view)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
        response_parts[ctx.message.id] = remaining
        
    except Exception as e:
        await ctx.reply(f"üö´ Error: {str(e)}")

if __name__ == "__main__":
    bot.run(DISCORD_TOKEN)