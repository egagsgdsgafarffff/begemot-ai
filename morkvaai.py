import asyncio
import logging
from typing import Dict, List, Optional # –î–æ–±–∞–≤–ª–µ–Ω–æ Optional
import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import json
# --- –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è Exa ---
from exa_py import Exa
# -----------------------

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = ""  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
# --- –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è Exa ---
EXA_API_KEY = "" # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API-–∫–ª—é—á Exa
# -----------------------
LM_STUDIO_URL = "http://localhost:1234/v1/chat/completions"  # URL LM Studio API
MODEL_NAME = "qwen/qwen3-4b"  # –ò–º—è –º–æ–¥–µ–ª–∏ –≤ LM Studio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è Exa ---
exa_client: Optional[Exa] = None
# -----------------------

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ChatStates(StatesGroup):
    waiting_for_message = State()
    in_conversation = State()
    setting_system_prompt = State()
    # --- –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è Exa ---
    waiting_for_search_query = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
    # -----------------------

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_contexts: Dict[int, List[Dict[str, str]]] = {}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_system_prompts: Dict[int, str] = {}

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_SYSTEM_PROMPT = "–í—ã –ø–æ–ª–µ–∑–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ."

class LMStudioClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LM Studio API"""
    def __init__(self, base_url: str, model_name: str):
        self.base_url = base_url
        self.model_name = model_name

    async def generate_response(self, messages: List[Dict[str, str]],
                              max_tokens: int = 1000,
                              temperature: float = 0.7) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        payload = {
            "model": self.model_name,
            "messages": messages,
            "max_tokens": max_tokens,
            "temperature": temperature,
            "stream": False
        }
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    self.base_url,
                    json=payload,
                    headers={"Content-Type": "application/json"}
                ) as response:
                    if response.status != 200:
                        logger.error(f"LM Studio API error: {response.status}")
                        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò –º–æ–¥–µ–ª–∏."
                    data = await response.json()
                    return data["choices"][0]["message"]["content"]
        except aiohttp.ClientError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å LM Studio: {e}")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ò–ò –º–æ–¥–µ–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ LM Studio –∑–∞–ø—É—â–µ–Ω."
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞."

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
lm_client = LMStudioClient(LM_STUDIO_URL, MODEL_NAME)

def get_user_context(user_id: int) -> List[Dict[str, str]]:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_contexts:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
        system_prompt = get_user_system_prompt(user_id)
        user_contexts[user_id] = [
            {"role": "system", "content": system_prompt}
        ]
    return user_contexts[user_id]

def get_user_system_prompt(user_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_system_prompts.get(user_id, DEFAULT_SYSTEM_PROMPT)

def set_user_system_prompt(user_id: int, prompt: str):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_system_prompts[user_id] = prompt
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –Ω–æ–≤—ã–º —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
    if user_id in user_contexts:
        user_contexts[user_id] = [
            {"role": "system", "content": prompt}
        ]

def add_to_context(user_id: int, role: str, content: str, max_context_length: int = 10):
    """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    context = get_user_context(user_id)
    context.append({"role": role, "content": content})
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    # --- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–¥–∞–ª—è–µ–º —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ *–ø–æ—Å–ª–µ* —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ ---
    if len(context) > max_context_length:
         if len(context) > 1: # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –µ—Å—Ç—å —á—Ç–æ —É–¥–∞–ª—è—Ç—å –ø–æ—Å–ª–µ system
            context.pop(1) # –£–¥–∞–ª—è–µ–º –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç (–ø–µ—Ä–≤—ã–π –ø–æ—Å–ª–µ system)
    # -----------------------

def clear_user_context(user_id: int):
    """–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫—Ä–æ–º–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞)"""
    system_prompt = get_user_system_prompt(user_id)
    user_contexts[user_id] = [
        {"role": "system", "content": system_prompt}
    ]

def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown"""
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    return text

# --- –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è Exa ---
async def search_with_exa(query: str, num_results: int = 5) -> List[Dict]:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Exa –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    if not exa_client:
        logger.error("Exa client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        return []
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º run_in_executor –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ Exa
        loop = asyncio.get_event_loop()
        search_response = await loop.run_in_executor(None, exa_client.search, query, {"num_results": num_results})
        results = []
        for result in search_response.results:
            results.append({
                "title": result.title,
                "url": result.url,
                "text": result.text # –ò–ª–∏ result.highlights, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
            })
        return results
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —á–µ—Ä–µ–∑ Exa: {e}")
        return []

@dp.message(Command("search"))
async def search_command(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ Exa"""
    prompt_text = (
        "üîç –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —á–µ—Ä–µ–∑ Exa\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:"
    )
    await message.answer(prompt_text)
    await state.set_state(ChatStates.waiting_for_search_query)

@dp.message(F.text, ChatStates.waiting_for_search_query)
async def handle_search_query(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    query = message.text.strip()
    if not query:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return

    await message.answer(f"–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É: `{escape_markdown(query)}`...", parse_mode="MarkdownV2")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    await bot.send_chat_action(message.chat.id, "typing")

    try:
        results = await search_with_exa(query)
        if not results:
             await message.answer("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
             await state.set_state(ChatStates.in_conversation) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
             return

        response_text = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è: *{escape_markdown(query)}*\n\n"
        for i, result in enumerate(results[:5]): # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            title = escape_markdown(result.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:200]) # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º
            url = escape_markdown(result.get('url', 'URL –Ω–µ –Ω–∞–π–¥–µ–Ω')) # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º URL
            snippet = escape_markdown(result.get('text', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')[:400] + "...") # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º

            response_text += f"{i+1}\\. [{title}]({url})\n{snippet}\n\n"

        # Telegram –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if len(response_text) > 4096:
             chunks = [response_text[i:i+4096] for i in range(0, len(response_text), 4096)]
             for chunk in chunks:
                 await message.answer(chunk, parse_mode="MarkdownV2")
        else:
             await message.answer(response_text, parse_mode="MarkdownV2")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ search: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞.")

    await state.set_state(ChatStates.in_conversation) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# -----------------------

@dp.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    clear_user_context(user_id)
    welcome_text = (
        "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ª–æ–∫–∞–ª—å–Ω–æ–π –ò–ò –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ LM Studio.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
        "‚Ä¢ /clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞\n"
        "‚Ä¢ /system - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç\n"
        "‚Ä¢ /show_system - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç\n"
        "‚Ä¢ /reset_system - —Å–±—Ä–æ—Å–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∫ —É–º–æ–ª—á–∞–Ω–∏—é\n"
        "‚Ä¢ /search - –ø–æ–∏—Å–∫–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —á–µ—Ä–µ–∑ Exa\n" # –î–æ–±–∞–≤–ª–µ–Ω–æ
        "‚Ä¢ /status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –º–æ–¥–µ–ª–∏\n"
        "‚Ä¢ /help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é –ª–æ–∫–∞–ª—å–Ω–æ–π –ò–ò –º–æ–¥–µ–ª–∏!"
    )
    await message.answer(welcome_text)
    await state.set_state(ChatStates.in_conversation)

@dp.message(Command("system"))
async def system_prompt_command(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
    prompt_text = (
        "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞\n"
        "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∏ —Ä–æ–ª—å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.\n"
        "–ü—Ä–∏–º–µ—Ä—ã —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤:\n"
        "‚Ä¢ \"–í—ã –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Å –∫–æ–¥–æ–º\"\n"
        "‚Ä¢ \"–í—ã –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ø–∏—Å–∞—Ç–µ–ª—å, —Å–æ–∑–¥–∞—é—â–∏–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏\"\n"
        "‚Ä¢ \"–í—ã —Å—Ç—Ä–æ–≥–∏–π —É—á–∏—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –æ–±—ä—è—Å–Ω—è–µ—Ç —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏\"\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:"
    )
    await message.answer(prompt_text)
    await state.set_state(ChatStates.setting_system_prompt)

@dp.message(Command("show_system"))
async def show_system_prompt_command(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
    user_id = message.from_user.id
    current_prompt = get_user_system_prompt(user_id)
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
    escaped_prompt = escape_markdown(current_prompt)
    response_text = (
        "üìã –¢–µ–∫—É—â–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:\n"
        f"`{escaped_prompt}`\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /system –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ /reset\\_system –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫ —É–º–æ–ª—á–∞–Ω–∏—é\\."
    )
    await message.answer(response_text, parse_mode="MarkdownV2")

@dp.message(Command("reset_system"))
async def reset_system_prompt_command(message: types.Message):
    """–°–±—Ä–æ—Å–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∫ —É–º–æ–ª—á–∞–Ω–∏—é"""
    user_id = message.from_user.id
    set_user_system_prompt(user_id, DEFAULT_SYSTEM_PROMPT)
    escaped_prompt = escape_markdown(DEFAULT_SYSTEM_PROMPT)
    response_text = (
        "üîÑ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å–±—Ä–æ—à–µ–Ω –∫ —É–º–æ–ª—á–∞–Ω–∏—é\\!\n"
        f"–ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç: `{escaped_prompt}`"
    )
    await message.answer(response_text, parse_mode="MarkdownV2")

@dp.message(Command("cancel"))
async def cancel_command(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
    await state.clear()
    await state.set_state(ChatStates.in_conversation)
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

@dp.message(F.text, ChatStates.setting_system_prompt)
async def handle_system_prompt_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
    user_id = message.from_user.id
    new_prompt = message.text.strip()
    if len(new_prompt) < 10:
        await message.answer(
            "‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)."
        )
        return
    if len(new_prompt) > 1000:
        await message.answer(
            "‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –µ–≥–æ –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ –º–µ–Ω—å—à–µ."
        )
        return
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    set_user_system_prompt(user_id, new_prompt)
    escaped_prompt = escape_markdown(new_prompt)
    response_text = (
        "‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω\\!\n"
        f"–ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç:\n`{escaped_prompt}`\n"
        "–¢–µ–ø–µ—Ä—å –ò–ò –±—É–¥–µ—Ç –≤–µ—Å—Ç–∏ —Å–µ–±—è —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º\\."
    )
    await message.answer(response_text, parse_mode="MarkdownV2")
    await state.set_state(ChatStates.in_conversation)

@dp.message(Command("clear"))
async def clear_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    user_id = message.from_user.id
    clear_user_context(user_id)
    await message.answer("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω–∞!")

@dp.message(Command("status"))
async def status_command(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LM Studio"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        test_messages = [{"role": "user", "content": "test"}]
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        await bot.send_chat_action(message.chat.id, "typing")
        response = await lm_client.generate_response(test_messages)
        if "–æ—à–∏–±–∫–∞" not in response.lower() and "–Ω–µ —É–¥–∞–ª–æ—Å—å" not in response.lower():
            await message.answer("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LM Studio –∞–∫—Ç–∏–≤–Ω–æ!")
        else:
            await message.answer("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ LM Studio")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")

@dp.message(Command("help"))
async def help_command(message: types.Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"""
    help_text = (
        "üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –ò–ò –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ LM Studio –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤.\n"
        "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞:\n"
        "1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ LM Studio\n"
        "2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–æ–¥–µ–ª—å\n"
        "3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä (–æ–±—ã—á–Ω–æ localhost:1234)\n"
        "‚ö° –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫\n"
        "/clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n"
        "/system - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç\n"
        "/show_system - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç\n"
        "/reset_system - —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–º–ø—Ç –∫ —É–º–æ–ª—á–∞–Ω–∏—é\n"
        "/search - –ø–æ–∏—Å–∫–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —á–µ—Ä–µ–∑ Exa\n" # –î–æ–±–∞–≤–ª–µ–Ω–æ
        "/status - —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n"
        "üé≠ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:\n"
        "–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–æ–ª—å –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ –£—á–∏—Ç–µ–ª—å, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, –ø–∏—Å–∞—Ç–µ–ª—å\n"
        "‚Ä¢ –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π/–Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π)\n"
        "‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ç–µ–º–∞–º"
    )
    await message.answer(help_text)

@dp.message(F.text, ChatStates.in_conversation)
async def handle_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    user_message = message.text
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    await bot.send_chat_action(message.chat.id, "typing")
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    add_to_context(user_id, "user", user_message)
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –º–æ–¥–µ–ª—å
    context = get_user_context(user_id)
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    ai_response = await lm_client.generate_response(context)
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    add_to_context(user_id, "assistant", ai_response)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await message.answer(ai_response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞.")

@dp.message()
async def handle_other_messages(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤–Ω–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    current_state = await state.get_state()
    if current_state == ChatStates.waiting_for_search_query:
         # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç, –∫–æ–≥–¥–∞ –º—ã –∂–¥–∞–ª–∏ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
         await handle_search_query(message, state)
    elif current_state == ChatStates.setting_system_prompt:
         # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç, –∫–æ–≥–¥–∞ –º—ã –∂–¥–∞–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
         await handle_system_prompt_input(message, state)
    elif current_state == ChatStates.in_conversation:
        await message.answer("–Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
    else:
        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
        await message.answer("–Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    global exa_client # --- –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Exa ---
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    # --- –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Exa ---
    global EXA_API_KEY
    if not EXA_API_KEY or EXA_API_KEY == "YOUR_EXA_API_KEY":
        logger.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å EXA_API_KEY!")
        return
    try:
        exa_client = Exa(EXA_API_KEY)
        logger.info("Exa –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Exa –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return
    # -----------------------

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        logger.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å BOT_TOKEN!")
        return
    try:
        # –£–¥–∞–ª—è–µ–º –≤–µ–±-—Ö—É–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º polling
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":

    asyncio.run(main())
